package com.everydaypratic;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.everydaypratic.Student;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STUDENT.
*/
public class StudentDao extends AbstractDao<Student, Double> {

    public static final String TABLENAME = "STUDENT";

    /**
     * Properties of entity Student.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LearnNumber = new Property(0, double.class, "LearnNumber", true, "LEARN_NUMBER");
        public final static Property Name = new Property(1, Short.class, "Name", false, "NAME");
        public final static Property Sex = new Property(2, String.class, "Sex", false, "SEX");
        public final static Property Age = new Property(3, Double.class, "Age", false, "AGE");
        public final static Property Number = new Property(4, Double.class, "Number", false, "NUMBER");
    };


    public StudentDao(DaoConfig config) {
        super(config);
    }
    
    public StudentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STUDENT' (" + //
                "'LEARN_NUMBER' REAL PRIMARY KEY NOT NULL ," + // 0: LearnNumber
                "'NAME' INTEGER," + // 1: Name
                "'SEX' TEXT," + // 2: Sex
                "'AGE' REAL," + // 3: Age
                "'NUMBER' REAL);"); // 4: Number
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_STUDENT_LEARN_NUMBER ON STUDENT" +
                " (LEARN_NUMBER);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STUDENT'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Student entity) {
        stmt.clearBindings();
        stmt.bindDouble(1, entity.getLearnNumber());
 
        Short Name = entity.getName();
        if (Name != null) {
            stmt.bindLong(2, Name);
        }
 
        String Sex = entity.getSex();
        if (Sex != null) {
            stmt.bindString(3, Sex);
        }
 
        Double Age = entity.getAge();
        if (Age != null) {
            stmt.bindDouble(4, Age);
        }
 
        Double Number = entity.getNumber();
        if (Number != null) {
            stmt.bindDouble(5, Number);
        }
    }

    /** @inheritdoc */
    @Override
    public Double readKey(Cursor cursor, int offset) {
        return cursor.getDouble(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Student readEntity(Cursor cursor, int offset) {
        Student entity = new Student( //
            cursor.getDouble(offset + 0), // LearnNumber
            cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1), // Name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Sex
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // Age
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // Number
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Student entity, int offset) {
        entity.setLearnNumber(cursor.getDouble(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getShort(offset + 1));
        entity.setSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAge(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setNumber(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Double updateKeyAfterInsert(Student entity, long rowId) {
        return entity.getLearnNumber();
    }
    
    /** @inheritdoc */
    @Override
    public Double getKey(Student entity) {
        if(entity != null) {
            return entity.getLearnNumber();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
